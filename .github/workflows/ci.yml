name: Gatherly CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests (RSpec & Quality)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [rspec, rubocop]
    services:
      db:
        image: postgres:13
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: gatherly_admin
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: gatherly_test

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Cache Gems
      - name: Cache Gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-bundle-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-bundle-

      # Setup Ruby Environment
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1
          bundler-cache: true

      # Install and cache Node.js dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      # Install Yarn Dependencies
      - name: Install Yarn Dependencies
        run: yarn install

      # Run Tasks (RSpec and RuboCop)
      - name: Run ${{ matrix.task }}
        env:
          RAILS_ENV: test
        run: |
          if [ "${{ matrix.task }}" == "rspec" ]; then
            bin/rails db:create db:migrate
            bundle exec rspec
          elif [ "${{ matrix.task }}" == "rubocop" ]; then
            bundle exec rubocop
          fi

  security_check:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1

      - name: Run Security Audit
        run: |
          gem install bundler-audit brakeman
          bundle-audit check --update
          brakeman -q

  docker_build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security_check]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/app:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/app:latest

## Will work on later
  # deploy:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: docker_build
  #   steps:
  #     - name: Deploy Application
  #       run: |
  #         docker pull ${{ secrets.DOCKER_USERNAME }}/app:latest
  #         docker run -d --name app-container -p 80:80 ${{ secrets.DOCKER_USERNAME }}/app:latest

  # coverage_check:
  #   name: Coverage Check
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Upload Coverage
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}